// Code generated by reactGen. DO NOT EDIT.

package container

import "myitcv.io/react"

type ContainerElem struct {
	react.Element
}

func buildContainer(cd react.ComponentDef) react.Component {
	return ContainerDef{ComponentDef: cd}
}

func buildContainerElem(children ...react.Element) *ContainerElem {
	return &ContainerElem{
		Element: react.CreateElement(buildContainer, nil, children...),
	}
}

func (c ContainerDef) RendersElement() react.Element {
	return c.Render()
}

// SetState is an auto-generated proxy proxy to update the state for the
// Container component.  SetState does not immediately mutate c.State()
// but creates a pending state transition.
func (c ContainerDef) SetState(state ContainerState) {
	c.ComponentDef.SetState(state)
}

// State is an auto-generated proxy to return the current state in use for the
// render of the Container component
func (c ContainerDef) State() ContainerState {
	return c.ComponentDef.State().(ContainerState)
}

// IsState is an auto-generated definition so that ContainerState implements
// the myitcv.io/react.State interface.
func (c ContainerState) IsState() {}

var _ react.State = ContainerState{}

// GetInitialStateIntf is an auto-generated proxy to GetInitialState
func (c ContainerDef) GetInitialStateIntf() react.State {
	return c.GetInitialState()
}

func (c ContainerState) EqualsIntf(val react.State) bool {
	return c == val.(ContainerState)
}
